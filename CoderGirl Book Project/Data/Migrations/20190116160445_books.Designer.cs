// <auto-generated />
using CoderGirl_Book_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CoderGirl_Book_Project.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190116160445_books")]
    partial class books
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoderGirl_Book_Project.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author1")
                        .IsRequired()
                        .HasColumnName("Author")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Author1")
                        .IsUnique()
                        .HasName("AK_Author_Column");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("Book_Id");

                    b.Property<int>("AuthorId")
                        .HasColumnName("Author_Id");

                    b.HasKey("BookId", "AuthorId")
                        .HasName("Book_Author_pk");

                    b.HasIndex("AuthorId");

                    b.ToTable("Book_Author");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Cover")
                        .HasColumnType("image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksCategory", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("Book_Id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("Category_Id");

                    b.HasKey("BookId", "CategoryId")
                        .HasName("PK__Books_Ca__34F8CB6279506F07");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books_Category");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksRating", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("Book_Id");

                    b.Property<int>("RatingId")
                        .HasColumnName("Rating_Id");

                    b.HasKey("BookId", "RatingId")
                        .HasName("Book_Rating_pk");

                    b.HasIndex("RatingId");

                    b.ToTable("Books_Rating");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksTags", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnName("Book_Id");

                    b.Property<int>("TagId")
                        .HasColumnName("Tag_Id");

                    b.HasKey("BookId", "TagId")
                        .HasName("PK__Books_Ta__EF29367506627FBC");

                    b.HasIndex("TagId");

                    b.ToTable("Books_Tags");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .IsUnique()
                        .HasName("AK_Category_Column");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.Ratings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Rating")
                        .IsUnique()
                        .HasName("AK_Ratings_Column");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Tag")
                        .IsUnique()
                        .HasName("AK_Tag_Column");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BookAuthor", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.Author", "Author")
                        .WithMany("BookAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Author");

                    b.HasOne("CoderGirl_Book_Project.Models.Books", "Book")
                        .WithMany("BookAuthor")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_Book");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksCategory", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.Books", "Book")
                        .WithMany("BooksCategory")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Books_Cat__Book___55BFB948");

                    b.HasOne("CoderGirl_Book_Project.Models.Categories", "Category")
                        .WithMany("BooksCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Books_Cat__Categ__6F7F8B4B");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksRating", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.Books", "Book")
                        .WithMany("BooksRating")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Books_Rat__Book___2116E6DF");

                    b.HasOne("CoderGirl_Book_Project.Models.Ratings", "Rating")
                        .WithMany("BooksRating")
                        .HasForeignKey("RatingId")
                        .HasConstraintName("FK__Books_Rat__Ratin__220B0B18");
                });

            modelBuilder.Entity("CoderGirl_Book_Project.Models.BooksTags", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.Books", "Book")
                        .WithMany("BooksTags")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__Books_Tag__Book___56B3DD81");

                    b.HasOne("CoderGirl_Book_Project.Models.Tags", "Tag")
                        .WithMany("BooksTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK__Books_Tag__Tag_I__7073AF84");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoderGirl_Book_Project.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoderGirl_Book_Project.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
